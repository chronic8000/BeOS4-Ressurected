//******************************************************************************
//
//	File:			wdef_float.c
//
//	Description:	brand new wdef, you will love it.
//	
//	Written by:		Benoit Schillings, Pierre Raynaud-Richard
//
//	Copyright 1998, Be Incorporated. All Rights Reserved.
//
//******************************************************************************/

#ifndef	GR_TYPES_H
#include "gr_types.h"
#endif

#ifndef	MACRO_H
#include "macro.h"
#endif

#ifndef	PROTO_H
#include "proto.h"
#endif

#ifndef	WINDOW_H
#include "window.h"
#endif

#ifndef	_STRING_H
#include <string.h>
#endif

#ifndef	_TEXT_H
#include "text.h"
#endif

#include "rect.h"
#include "render.h"
#include "renderUtil.h"

/*---------------------------------------------------------------*/
extern void		cleanup_region(region*);
extern region *	calc_desk();
/*---------------------------------------------------------------*/

#undef WD_TAB_HEIGHT
#undef WD_FRAME_SIZE
#undef CLOSE_ICON_WIDTH
#undef CLOSE_ICON_HEIGHT
#undef ZOOM_ICON_WIDTH
#undef ZOOM_ICON_HEIGHT
#undef MINIMIZE_ICON_WIDTH
#undef MINIMIZE_ICON_HEIGHT
#undef LEFT_TITLE_GAP
#undef RIGHT_TITLE_GAP
#undef ICON_MARGIN

#define WD_TAB_HEIGHT 			14
#define WD_FRAME_SIZE 			3
#define CLOSE_ICON_WIDTH		12
#define	CLOSE_ICON_HEIGHT		12
#define ZOOM_ICON_WIDTH			12
#define	ZOOM_ICON_HEIGHT		12
#define MINIMIZE_ICON_WIDTH		12
#define MINIMIZE_ICON_HEIGHT	12
#define LEFT_TITLE_GAP			10
#define RIGHT_TITLE_GAP			8
#define ICON_MARGIN				3

#define	bar_size	WD_TAB_HEIGHT
#define BB			WD_FRAME_SIZE
#define	lbs			BB	/*left border size*/
#define	rbs			BB
#define	bbs			BB	/*bottom border size*/
#define	tbs			BB	/*bottom border size*/


#define	go_off_top	1
#define	go_off_left	4
#define	go_dx		8
#define	go_dy		8

/*---------------------------------------------------------------*/

unsigned char w7_close_icon[] = {
0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x3f,0x3f,
0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f,
0x98,0xfc,0xfc,0xe5,0xfc,0xe5,0xe5,0xe5,0xe5,0xe5,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xe5,0xfc,0xe5,0xe5,0xe5,0xf9,0xe5,0xf9,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xfc,0xe5,0xe5,0xe5,0xf9,0xe5,0xf9,0xe5,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xe5,0xe5,0xe5,0xe5,0xf9,0xf9,0xf9,0xf9,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xe5,0xe5,0xf9,0xf9,0xf9,0xf9,0xbd,0xbd,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xe5,0xf9,0xe5,0xf9,0xf9,0xbd,0xf9,0xbd,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xe5,0xf9,0xe5,0xf9,0xbd,0xbd,0xbd,0xbd,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xf9,0xe5,0xf9,0xbd,0xbd,0xbd,0xbd,0xbd,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0xfc,0x3f,0x3f,
0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f};

unsigned char w7_close_select_icon[] = {
0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x3f,0x3f,
0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0xfc,0x3f,0x3f,
0x98,0x98,0xbd,0xbd,0xbd,0xbd,0xbd,0xf9,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xbd,0xbd,0xbd,0xbd,0xf9,0xf9,0xe5,0xf9,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xbd,0xbd,0xbd,0xbd,0xf9,0xf9,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xbd,0xbd,0xbd,0xf9,0xf9,0xe5,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xbd,0xf9,0xf9,0xf9,0xe5,0xf9,0xe5,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xf9,0xf9,0xf9,0xe5,0xf9,0xe5,0xe5,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xe5,0xf9,0xe5,0xe5,0xe5,0xe5,0xe5,0xfc,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xf9,0xe5,0xe5,0xe5,0xe5,0xe5,0xfc,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f,
0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f};

unsigned char w7_zoom_icon[] = {
0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0xf9,0xf9,0xf9,0xf9,0xf9,0x3f,0x3f,
0x5d,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xf9,0xf9,0xf9,0xf9,0x3f,0x3f,
0x5d,0xfc,0xfc,0xe5,0xe5,0xf9,0x5d,0xfc,0xf9,0xf9,0xf9,0xf9,0x1e,0x3f,
0x5d,0xfc,0xe5,0xe5,0xf9,0xf9,0x5d,0xfc,0x5d,0x5d,0x5d,0x5d,0x3f,0x3f,
0x5d,0xfc,0xe5,0xf9,0xe5,0xf9,0x5d,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f,
0x5d,0xfc,0xf9,0xf9,0xbd,0xbd,0x5d,0xfc,0xe5,0xe5,0x5d,0xfc,0x3f,0x3f,
0x5d,0xfc,0x5d,0x5d,0x5d,0x5d,0x5d,0xfc,0xe5,0xf9,0x5d,0xfc,0x3f,0x3f,
0xf9,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xf9,0xe5,0x5d,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x5d,0xfc,0xe5,0xf9,0xe5,0xf9,0xf9,0x5d,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x5d,0xfc,0xbd,0xbd,0xbd,0xbd,0xbd,0x5d,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x5d,0xfc,0x5d,0x5d,0x5d,0x5d,0x5d,0x5d,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x5d,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f};

unsigned char w7_zoom_select_icon[] = {
0x98,0x98,0x98,0x98,0x98,0x98,0x98,0x98,0xf9,0xf9,0xf9,0xf9,0x3f,0x3f,
0x98,0x98,0x98,0x98,0x98,0x98,0x98,0xfc,0xf9,0xf9,0xf9,0xf9,0x3f,0x3f,
0x98,0x98,0xbd,0xbd,0xbd,0xf9,0xfc,0xfc,0xf9,0xf9,0xf9,0xf9,0x3f,0x3f,
0x98,0x98,0xbd,0xf9,0xf9,0xe5,0xfc,0xfc,0x98,0x98,0x98,0x98,0x3f,0x3f,
0x98,0x98,0xbd,0xf9,0xf9,0xe5,0xfc,0xfc,0x98,0x98,0x98,0xfc,0x3f,0x3f,
0x98,0x98,0xf9,0xe5,0xe5,0xe5,0xfc,0xfc,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0x98,0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xe5,0xf9,0xfc,0xfc,0x3f,0x3f,
0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x98,0x98,0xe5,0xf9,0xe5,0xf9,0xe5,0xfc,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x98,0x98,0xe5,0xe5,0xe5,0xe5,0xe5,0xfc,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x98,0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f,
0xf9,0xf9,0xf9,0x98,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0xfc,0x3f,0x3f};

unsigned char w7_bw_zoom_icon[] = {
0x0e,0x0e,0x0f,0x0e,0x0e,0x0e,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x3f,0x3f,0x17,0x17,0xff,0x0f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x3f,0x17,0x17,0xff,0xff,0x0f,0x3f,0x0e,0x0e,0x0e,0x0e,0xff,0xff,
0x0f,0x3f,0x17,0xff,0x17,0xff,0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff,
0x0f,0x3f,0xff,0xff,0x15,0x14,0x0e,0x3f,0x17,0x17,0x0e,0x3f,0xff,0xff,
0x0f,0x3f,0x0e,0x0e,0x0f,0x0e,0x0f,0x3f,0x17,0xff,0x0e,0x3f,0xff,0xff,
0xff,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0x17,0x0e,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x3f,0x17,0x17,0xff,0x17,0xff,0x0e,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x3f,0x17,0xff,0x17,0xff,0xff,0x0f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x3f,0x0e,0x0f,0x0e,0x0e,0x0f,0x0f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff};

unsigned char w7_bw_zoom_select_icon[] = {
0x0e,0x0e,0x0f,0x0e,0x0e,0x0e,0x0f,0x0e,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x0f,0x0e,0x0f,0x0e,0x0f,0x0e,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x0e,0x15,0x14,0x14,0xff,0x3f,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,
0x0e,0x0e,0x15,0xff,0xff,0x17,0x3f,0x3f,0x0e,0x0e,0x0e,0x0e,0xff,0xff,
0x0f,0x0e,0x14,0xff,0xff,0x17,0x3f,0x3f,0x0e,0x0e,0x0e,0x3f,0xff,0xff,
0x0f,0x0e,0xff,0x17,0x17,0x17,0x3f,0x3f,0xff,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x17,0xff,0x3f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0x17,0x3f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x0f,0xff,0x17,0xff,0x17,0xff,0x3f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x0f,0x17,0xff,0x17,0xff,0x17,0x3f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff,
0xff,0xff,0xff,0x0e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff};

unsigned char w7_close_minimize_icon[] = {
0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x6d,0x6d,
0x94,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x6d,0x6d,
0x94,0x40,0x3f,0x67,0x40,0x40,0x6d,0x40,0x6d,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x67,0x40,0x6d,0x6d,0x40,0x6d,0x6d,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x6d,0x40,0x40,0x6d,0x6d,0x6d,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x6d,0x40,0x6d,0x6d,0x6d,0x94,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x6d,0x40,0x6d,0x6d,0x6d,0x94,0x6d,0x94,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x6d,0x6d,0x6d,0x94,0x6d,0x94,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x6d,0x6d,0x6d,0x94,0x6d,0x94,0x6d,0x94,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x6d,0x6d,0x6d,0x6d,0x94,0x6d,0x94,0x6d,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x6d,0x6d,
0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,
0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d};

unsigned char w7_close_minimize_select_icon[] = {
0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x6d,0x6d,
0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x94,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x6d,0x94,0x6d,0x6d,0x94,0x6d,0x94,0x6d,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x94,0x6d,0x94,0x94,0x6d,0x94,0x6d,0x6d,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x6d,0x94,0x6d,0x6d,0x94,0x6d,0x6d,0x6d,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x6d,0x94,0x6d,0x6d,0x6d,0x6d,0x6d,0x40,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x94,0x6d,0x94,0x6d,0x6d,0x6d,0x40,0x6d,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x6d,0x94,0x6d,0x6d,0x6d,0x40,0x6d,0x40,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x94,0x6d,0x6d,0x6d,0x40,0x6d,0x40,0x6d,0x40,0x40,0x6d,0x6d,
0x94,0x94,0x6d,0x6d,0x6d,0x40,0x6d,0x40,0x6d,0x40,0x40,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x6d,0x6d,
0x94,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x6d,0x6d,
0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,
0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d,0x6d};

unsigned char w7_bw_close_icon[] = {
0x0e,0x0e,0x0f,0x0e,0x0e,0x0e,0x0f,0x0e,0x0e,0x0f,0x0e,0x0f,0xff,0xff,
0x0e,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x17,0x3f,0x17,0x17,0x17,0x17,0x17,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0x3f,0x17,0x17,0x17,0xff,0x17,0xff,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x17,0x17,0x17,0xff,0x17,0xff,0x17,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0x17,0x17,0x17,0xff,0xff,0xff,0xff,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0x17,0xff,0xff,0xff,0xff,0x14,0x15,0x0e,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0xff,0x17,0xff,0xff,0x14,0xff,0x14,0x0e,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0x17,0xff,0xff,0x14,0xff,0x15,0x14,0x0e,0x3f,0xff,0xff,
0x0f,0x3f,0x17,0xff,0x17,0xff,0x14,0x15,0x14,0x14,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x0e,0x0e,0x0f,0x0e,0x0f,0x0e,0x0f,0x0e,0x0f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff};

unsigned char w7_bw_close_select_icon[] = {
0x0e,0x0e,0x0f,0x0e,0x0e,0x0e,0x0f,0x0e,0x0e,0x0f,0x0e,0x0f,0xff,0xff,
0x0e,0x0e,0x0f,0x0e,0x0e,0x0e,0x0f,0x0e,0x0e,0x0f,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x14,0x15,0x14,0x14,0x15,0xff,0xff,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x14,0x15,0x14,0x14,0xff,0xff,0x17,0xff,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x14,0x15,0x14,0x14,0xff,0xff,0xff,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x14,0x15,0x14,0xff,0xff,0x17,0xff,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x14,0xff,0xff,0xff,0x17,0xff,0x17,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0xff,0xff,0xff,0x17,0xff,0x17,0x17,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0xff,0x17,0xff,0xff,0x17,0x17,0x17,0x17,0x3f,0x3f,0xff,0xff,
0x0f,0x0e,0x17,0xff,0x17,0x17,0x17,0x17,0x17,0x3f,0x3f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff,
0x0f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0xff,0xff};

extern bool	are_titles_colored;
extern bool	use_default_title_color;
extern void show_region(int32 pid, region *r,char *);

void	TWindow::w7_draw_go_box(char hilited, char force)
{
	Pixels		goAwayBox;
	rect		tmp_r;
	int32		mode;
	
	grLock(wdefContext);

	if (!(flags & NO_GOAWAY) && (state & look_active)) {
		goAwayBox.h = CLOSE_ICON_HEIGHT;
		goAwayBox.w = CLOSE_ICON_WIDTH;
		goAwayBox.bytesPerRow = CLOSE_ICON_WIDTH+2;
		goAwayBox.pixelFormat = PIX_8BIT;
		goAwayBox.endianess = LENDIAN;
		goAwayBox.colorMap = (ColorMap*)system_cs->color_list;
		
		tmp_r = window_bound;
		tmp_r.top += ICON_MARGIN;
		tmp_r.bottom = tmp_r.top + (CLOSE_ICON_HEIGHT - 1);
		tmp_r.left += ICON_MARGIN;
		tmp_r.right = tmp_r.left + (CLOSE_ICON_WIDTH - 1);

		mode = OP_COPY;
		if (are_titles_colored && use_default_title_color) {
			if (hilited)
				goAwayBox.pixelData = w7_close_select_icon;
			else
				goAwayBox.pixelData = w7_close_icon;
		} else {
			mode = OP_BLEND;
			if (hilited)
				goAwayBox.pixelData = w7_bw_close_select_icon;
			else
				goAwayBox.pixelData = w7_bw_close_icon;
			if (force) {
				grSetForeColor(wdefContext, TitleColor(BACK_COLOR,this));
				grFillIRect(wdefContext, tmp_r);
			}
		}
		grDrawLocPixels(wdefContext,tmp_r.left,tmp_r.top,&goAwayBox);
	}

	grUnlock(wdefContext);
}

/*---------------------------------------------------------------*/

void	TWindow::w7_draw_go_minimized_box(char hilited, char force)
{
}

/*---------------------------------------------------------------*/

void	TWindow::w7_draw_zoom_box(char hilited, char force)
{
	Pixels		zoomBox;
	rect		tmp_r;
	int32		mode;
	
	grLock(wdefContext);
	
	if (!(flags & NO_ZOOM) && (state & look_active)) {
		zoomBox.h = ZOOM_ICON_HEIGHT;
		zoomBox.w = ZOOM_ICON_WIDTH;
		zoomBox.bytesPerRow = ZOOM_ICON_WIDTH+2;
		zoomBox.pixelFormat = PIX_8BIT;
		zoomBox.endianess = LENDIAN;
		zoomBox.colorMap = (ColorMap*)system_cs->color_list;
		
		tmp_r = window_bound;
		tmp_r.right = tmp_r.left + w7_calc_title_width(window_bound);
		tmp_r.top += ICON_MARGIN;
		tmp_r.bottom = tmp_r.top + (ZOOM_ICON_HEIGHT - 1);
		tmp_r.right -= ICON_MARGIN;
		tmp_r.left = tmp_r.right - (ZOOM_ICON_WIDTH - 1);

		mode = OP_COPY;
		if (are_titles_colored && use_default_title_color) {
			if (hilited)
				zoomBox.pixelData = w7_zoom_select_icon;
			else
				zoomBox.pixelData = w7_zoom_icon;
		} else {
			mode = OP_BLEND;
			if (hilited)
				zoomBox.pixelData = w7_bw_zoom_select_icon;
			else
				zoomBox.pixelData = w7_bw_zoom_icon;
			if (force) {
				grSetForeColor(wdefContext, TitleColor(BACK_COLOR,this));
				grFillIRect(wdefContext, tmp_r);
			}
		}
		grDrawLocPixels(wdefContext,tmp_r.left,tmp_r.top,&zoomBox);
	}

	grUnlock(wdefContext);
};

/*---------------------------------------------------------------*/

void	TWindow::w7_draw_minimize_box(char hilited)
{
}

/*---------------------------------------------------------------*/

long	TWindow::w7_calc_title_width(rect r)
{
	long	w;
	long	sw;

	sw = LEFT_TITLE_GAP + RIGHT_TITLE_GAP;
	if (!(flags & NO_GOAWAY))
		sw += CLOSE_ICON_WIDTH + ICON_MARGIN;
	if (!(flags & NO_ZOOM))
		sw += ZOOM_ICON_WIDTH + ICON_MARGIN;

	sw += (int)(fc_get_string_width(wfont, (uchar*)window_name)+1.0);

	w = r.right - r.left;

	if (w >= sw)
		return(sw);
	else
		return(w);
}

/*---------------------------------------------------------------*/
void	TWindow::w7_draw_frame(region *damage)
{
	rect		tmp_r,b;
	long		right,bottom;

	bool integrated_resize = (proc_id == 11);
	tmp_r = window_bound;
	bool is_modal = (proc_id == 3);
	bool active = looks_active();
	bool needLeft,needRight,needTop,needBottom;
	int32 frameSize = BB;
	RenderContext *context = wdefContext;

	grLock(context);

	set_rect(b,
		 tmp_r.top + (!is_modal ? bar_size+1 : 1),
		 tmp_r.left,
		 tmp_r.bottom,
		 tmp_r.right);

	if (damage && empty_region(damage)) {
		grUnlock(context);
		return;
	};

	if (damage) {
		rect d = damage->bound;
		needLeft = (d.left < (b.left+frameSize)) && (d.right >= b.left);
		needTop = (d.top < (b.top+frameSize)) && (d.bottom >= b.top);
		needRight = (d.left <= b.right) && (d.right > (b.right-frameSize));
		needBottom = (d.top <= b.bottom) && (d.bottom > (b.bottom-frameSize));
	} else {
		needLeft = needRight = needTop = needBottom = true;
	}
	
	grSetForeColor(context,wdef_standard_gray);
	if (needLeft) {
		grStrokeILine(context, b.left, b.top, b.left, b.bottom - 1);
		grStrokeILine(context, b.left + (BB-1), b.bottom - (BB-1), b.left + (BB-1), b.top + (BB-1));
	}
	if (needTop) {
		grStrokeILine(context, b.left, b.top, b.right - 1, b.top);
		grStrokeILine(context, b.left + (BB-1), b.top + (BB-1), b.right - (BB-1), b.top + (BB-1));
	}

#define RESIZE_BOX_SIZE 12

	if (needRight) {
		bottom = b.bottom - (BB - 1);
		if (integrated_resize) {
			bottom -= RESIZE_BOX_SIZE;
		}

		grStrokeILine(context, b.right - (BB-1), b.top + (BB-1), b.right - (BB-1), bottom);
	}
	if (needBottom) {
		right = b.right - (BB - 1);
		if (integrated_resize) {
			right -= RESIZE_BOX_SIZE;
		}

		grStrokeILine(context, right, b.bottom - (BB-1), b.left + (BB-1), b.bottom - (BB-1));
	}
	
	grSetForeColor(context,wdef_dark_gray);
	if (needRight)
		grStrokeILine(context, b.right, b.top, b.right, b.bottom);
	if (needBottom)
		grStrokeILine(context, b.right, b.bottom, b.left, b.bottom);

#if (BB > 2)
	// dark color
#if (BB == 3)
	grSetForeColor(context,FrameColor(BACK_COLOR, this));
#else
	grSetForeColor(context,FrameColor(DARK_BACK_COLOR, this));
#endif
	if (needBottom)
		grStrokeILine(context, b.left + 1, b.bottom - 1, b.right - 1, b.bottom - 1);
	if (needRight)
		grStrokeILine(context, b.right - 1, b.bottom - 1, b.right - 1, b.top + 1);
	if (needLeft)
		grStrokeILine(context, b.left + (BB-2), b.bottom - (BB-2), b.left + (BB-2), b.top + (BB-2));
	if (needTop)
		grStrokeILine(context, b.left + (BB-2), b.top + (BB-2), b.right - (BB-1), b.top + (BB-2));
#endif

#if (BB > 3)
	// standard color background
	grSetForeColor(context,FrameColor(BACK_COLOR, this));
	if (needLeft) {
		grStrokeILine(context, b.left + 2, b.bottom - 2, b.left + 2, b.top + 2);
		if (BB > 5)
			grStrokeILine(context, b.left + 3, b.bottom - 2, b.left + 3, b.top + 2);
	}
	if (needTop) {
		grStrokeILine(context, b.left + 4-1, b.top + 2, b.right - 2, b.top + 2);
		if (BB > 5)
			grStrokeILine(context, b.left + 4, b.top + 3, b.right - 2, b.top + 3);
	}
	if (needRight) {
		grStrokeILine(context, b.right - 2, b.top + 4-1, b.right - 2, b.bottom - 2);
		if (BB > 5)
			grStrokeILine(context, b.right - 3, b.top + 4, b.right - 3, b.bottom - 2);
	}
	if (needBottom) {
		grStrokeILine(context, b.right - 4+1, b.bottom - 2, b.left + 4-1, b.bottom - 2);
		if (BB > 5)
			grStrokeILine(context, b.right - 4, b.bottom - 3, b.left + 4, b.bottom - 3);
	}
#endif

	grSetForeColor(context,FrameColor(LIGHT_BACK_COLOR, this));
	if (needLeft)
		grStrokeILine(context, b.left + 1, b.bottom - 2, b.left + 1, b.top + 1);
	if (needTop)
		grStrokeILine(context, b.left + 1, b.top + 1, b.right - 2, b.top + 1);

	// right side
	if (needRight) {
		bottom = b.bottom - (BB - 2);
		if (integrated_resize) {
			bottom -= RESIZE_BOX_SIZE;
			// need 1 extra colored pixel
			grStrokeILine(context, b.right - (BB-2) - 1, bottom, b.right - (BB-2) - 1, bottom);
		}
		grStrokeILine(context, b.right - (BB-2), b.top + (BB-2), b.right - (BB-2), bottom);
	};

	// bottom side
	if (needBottom) {
		right = b.right - (BB - 2);
		if (integrated_resize) {
			right -= RESIZE_BOX_SIZE;
			// need 1 extra colored pixel
			grStrokeILine(context, right, b.bottom - (BB-2) - 1, right, b.bottom - (BB-2) - 1);
		}
		grStrokeILine(context, right, b.bottom - (BB-2), b.left + (BB-1), b.bottom - (BB-2));
	};

	// complete the drawing around the integrated resize area
	if (integrated_resize) {
		grSetForeColor(context,FrameColor(BACK_COLOR, this));

		// right side
		if (needRight) {
			bottom = b.bottom - (BB - 2) - RESIZE_BOX_SIZE + 1;
			grStrokeILine(context, b.right - (BB-2), bottom, b.right - (BB-2), b.bottom - (BB-2));
			grStrokeILine(context, b.right - (BB-1), bottom, b.right - (BB-1), b.bottom - (BB-2));
		};

		// bottom side
		if (needBottom) {
			right = b.right - (BB - 2) - RESIZE_BOX_SIZE + 1;
			grStrokeILine(context, right, b.bottom - (BB-2), b.right - (BB-2), b.bottom - (BB-2));
			grStrokeILine(context, right, b.bottom - (BB-1), b.right - (BB-2), b.bottom - (BB-1));
		};

		if (active) {
			grSetForeColor(context,FrameColor(LIGHT_BACK_COLOR, this));

			// draw the dots down the right side 
			long xx = b.right - (BB - 1);
			long yy = b.bottom - (BB - 2) - RESIZE_BOX_SIZE + 1;
			for (long ii = 0; ii < 4; ii++) {
				yy += 3;
				grStrokeILine(context, xx, yy, xx, yy);
			}

			// draw the dots across the bottom side 
			xx = b.right - (BB - 2) - RESIZE_BOX_SIZE + 1;
			yy = b.bottom - (BB - 1);
			for (long ii = 0; ii < 4; ii++) {
				xx += 3;
				grStrokeILine(context, xx, yy, xx, yy);
			}
		}
	}

	// draw sizing lines in corner
	if (!integrated_resize) {
		if ((flags & NO_SIZE) == 0) {
			grSetForeColor(context,wdef_standard_gray);
			grStrokeILine(context, b.right - (BB-2), b.bottom - 22, b.right - 1, b.bottom - 22);
			grStrokeILine(context, b.right - 22, b.bottom - (BB-2), b.right - 22, b.bottom - 1);
		}
	}

	grUnlock(context);
}

/*---------------------------------------------------------------*/

void TWindow::w7_draw_title(region *damage)
{
	rect		tmp_r;
	rect		tmp_r1;
	int32		h,w;
	char		title[128];
	char		tmp_str[128+4];
	fpoint		pen;
	static float fakeDeltas[2] = {0,0};
	
	tmp_r = window_bound;
	tmp_r.bottom = tmp_r.top + bar_size + 1;
	tmp_r.right = tmp_r.left + w7_calc_title_width(window_bound);

	if (damage && !rect_in_region(damage, &tmp_r)) return;
	
	grLock(wdefContext);

	grSetForeColor(wdefContext, TitleColor(DARK_BACK_COLOR, this));
	grStrokeILine(wdefContext, tmp_r.right - 1, tmp_r.top + 1, tmp_r.right - 1, tmp_r.bottom);

	w = (tmp_r.right - tmp_r.left) - (LEFT_TITLE_GAP + RIGHT_TITLE_GAP);
	if (!(flags & NO_GOAWAY))
		w -= (CLOSE_ICON_WIDTH + ICON_MARGIN);
	if (!(flags & NO_ZOOM))
		w -= (ZOOM_ICON_WIDTH + ICON_MARGIN);
	if (w < 0) w = 0;

	strncpy(title, window_name, 127);
	title[127] = 0;
	grTruncateString(wdefContext, w, FC_TRUNCATE_END, title, tmp_str);

	set_rect(tmp_r1,
		 tmp_r.top + 2,
		 tmp_r.left + 2,
		 tmp_r.bottom,
		 tmp_r.right - 2);

	grSetForeColor(wdefContext, TitleColor(BACK_COLOR, this));
	grFillIRect(wdefContext, tmp_r1);

#if SEPARATE_TAB
	grSetForeColor(wdefContext, TitleColor(DARK_BACK_COLOR, this));
	grStrokeILine(wdefContext, tmp_r1.left, tmp_r1.bottom, tmp_r1.right, tmp_r1.bottom);
#else
	grSetForeColor(wdefContext, FrameColor(BACK_COLOR, this));
	grStrokeILine(wdefContext, tmp_r1.left, tmp_r1.bottom + 1, tmp_r1.right + 2, tmp_r1.bottom + 1);
#endif

	h = tmp_r.left + LEFT_TITLE_GAP;
	if (!(flags & NO_GOAWAY))
		h += CLOSE_ICON_WIDTH + ICON_MARGIN;

	pen.h = h;
	pen.v = tmp_r.top + 4 + wfont->ascent();
	grSetForeColor(wdefContext, rgb_black);
	grSetBackColor(wdefContext, TitleColor(BACK_COLOR, this));
	grSetPenLocation(wdefContext,pen);
	grSetDrawOp(wdefContext,OP_COPY);
	grDrawString(wdefContext,(uchar*)tmp_str,fakeDeltas);
	
	grSetDrawOp(wdefContext,OP_COPY);
	grSetForeColor(wdefContext, wdef_dark_gray);
	if ((tmp_r.right - tmp_r.left) == (window_bound.right - window_bound.left))
		grStrokeILine(wdefContext, tmp_r.right, tmp_r.top, tmp_r.right, tmp_r.bottom + 1);
	else
		grStrokeILine(wdefContext, tmp_r.right, tmp_r.top, tmp_r.right, tmp_r.bottom);
	
	grSetForeColor(wdefContext, wdef_standard_gray);
	grStrokeILine(wdefContext, tmp_r.left, tmp_r.top, tmp_r.right - 1, tmp_r.top);
	grStrokeILine(wdefContext, tmp_r.left, tmp_r.top, tmp_r.left, tmp_r.bottom);

	grSetForeColor(wdefContext, TitleColor(LIGHT_BACK_COLOR, this));
	grStrokeILine(wdefContext, tmp_r.left + 1, tmp_r.top + 1, tmp_r.right - 2, tmp_r.top + 1);
	grStrokeILine(wdefContext, tmp_r.left + 1, tmp_r.top + 1, tmp_r.left + 1, tmp_r.bottom);

	// title bottom separator for inactive state
	if ((state & look_active) == 0) {
		grSetForeColor(wdefContext,rgb(201, 201, 201));
		grStrokeILine(wdefContext, tmp_r.left + 1, tmp_r.bottom, tmp_r.right - 1, tmp_r.bottom);
	}

	w7_draw_go_box(0);
	w7_draw_zoom_box(0);

	grUnlock(wdefContext);
}

/*---------------------------------------------------------------*/

void	TWindow::w7_window_redraw(region* damage)
{
	if (empty_region(damage)) return;

	fpoint newOrigin;
	region *tmpRegion1 = newregion();
	region *tmpRegion2 = newregion();
	newOrigin.h = newOrigin.v = 0;

	grLock(wdefContext);
#if 0
		/* Clear the views */
		grSetOrigin(wdefContext,newOrigin);
		and_region(damage, ClientRegion(), tmpRegion1);
		offset_region(tmpRegion1,-ClientRegion()->bound.left,-ClientRegion()->bound.top);
		grClipToIRegion(wdefContext,tmpRegion1);
		top_view->ClearGather(&tmpRegion1, wdefContext, NULL);
#endif
		/* Draw the wdef */
		newOrigin.h = -ClientRegion()->bound.left;
		newOrigin.v = -ClientRegion()->bound.top;
		grSetOrigin(wdefContext,newOrigin);
		grClipToRegion(wdefContext,damage);
		w7_draw_frame(damage);
		w7_draw_title(damage);

	grUnlock(wdefContext);

	kill_region(tmpRegion1);
	kill_region(tmpRegion2);
}

/*---------------------------------------------------------------*/

void	TWindow::w7_update_close_box(char hilited)
{
	fpoint newOrigin;
	grLock(wdefContext);
		newOrigin.h = -ClientRegion()->bound.left;
		newOrigin.v = -ClientRegion()->bound.top;
		grSetOrigin(wdefContext,newOrigin);
		grClearClip(wdefContext);
		w7_draw_go_box(hilited, TRUE);
	grUnlock(wdefContext);
}

/*---------------------------------------------------------------*/

void	TWindow::w7_update_zoom_box(char hilited)
{
	fpoint newOrigin;
	grLock(wdefContext);
		newOrigin.h = -ClientRegion()->bound.left;
		newOrigin.v = -ClientRegion()->bound.top;
		grSetOrigin(wdefContext,newOrigin);
		grClearClip(wdefContext);
		w7_draw_zoom_box(hilited, TRUE);
	grUnlock(wdefContext);
}

/*---------------------------------------------------------------*/

void	TWindow::w7_update_minimize_box(char hilited)
{
}

/*---------------------------------------------------------------*/

void	TWindow::w7_update_hilite()
{
	fpoint newOrigin;
	grLock(wdefContext);
		newOrigin.h = -ClientRegion()->bound.left;
		newOrigin.v = -ClientRegion()->bound.top;
		grSetOrigin(wdefContext,newOrigin);
		grClearClip(wdefContext);
		w7_draw_frame(NULL);
		w7_draw_title(NULL);
	grUnlock(wdefContext);
}

/*---------------------------------------------------------------*/

region*	TWindow::w7_calc_full(long proc_id, rect* bound)
{
	region	*rgn;
	rect	bnd;

	rgn = newregion();

	bnd = *bound;
	bnd.bottom = bnd.top + bar_size;
	bnd.right = bnd.left + w7_calc_title_width(*bound);
	ra(rgn, 0) = bnd;
	bnd = *bound;
	bnd.top = bnd.top + bar_size + 1;
	ra(rgn, 1) = bnd;

	rgn->count = 2;
	cleanup_region(rgn);

	return(rgn);
}

/*---------------------------------------------------------------*/

region*	TWindow::w7_calc_draw(long proc_id, rect* bound)
{
	region	*rgn;
	rect	tmp_rect;


	tmp_rect=*bound;

	tmp_rect.top += bar_size + tbs + 1;
	tmp_rect.bottom -= bbs;
	tmp_rect.left += lbs;
	tmp_rect.right -= rbs;
	
	rgn=newregion();
	set_region(rgn, &tmp_rect);
	return(rgn);
}

/*---------------------------------------------------------------*/

long 	TWindow::w7_find_part(long h, long v)
{
	rect	tmp_rect;
	rect	tmp_rect1;
	rect	tmp_rect2;

	tmp_rect = window_bound;

	tmp_rect1 = tmp_rect;

	tmp_rect1.bottom = tmp_rect1.top + CLOSE_ICON_HEIGHT + ICON_MARGIN;
	tmp_rect1.top += ICON_MARGIN;
	tmp_rect1.right = tmp_rect1.left + CLOSE_ICON_WIDTH + ICON_MARGIN;
	tmp_rect1.left += ICON_MARGIN;

	if (point_in_rect(&tmp_rect1, h, v)) {
		
		if (flags & NO_GOAWAY)
			return(TITLE_BAR);
		else
			return(CLOSE_BOX);
	}

	if (!(flags & NO_ZOOM)) {
		tmp_rect1.right = tmp_rect.left + w7_calc_title_width(window_bound);
		tmp_rect1.left = tmp_rect1.right - (ZOOM_ICON_WIDTH + ICON_MARGIN);
		tmp_rect1.right -= ICON_MARGIN;
		if (point_in_rect(&tmp_rect1, h, v))
			return(ZOOM_BOX);
	}

	/* if (!(flags & NO_MINIMIZE)) {
		if (!(flags & NO_ZOOM)) {
			tmp_rect1.right = tmp_rect1.left - ICON_MARGIN;
			tmp_rect1.left = tmp_rect1.right - MINIMIZE_ICON_WIDTH;
		}
		else {
			tmp_rect1.right = tmp_rect.left + w7_calc_title_width(window_bound);
			tmp_rect1.left = tmp_rect1.right - (MINIMIZE_ICON_WIDTHi + ICON_MARGIN);
			tmp_rect1.right -= ICON_MARGIN;
		}
		if (point_in_rect(&tmp_rect1, h, v))
			return(MINIMIZE_BOX);
	} */

	// check resize area
	tmp_rect1 = tmp_rect;
	tmp_rect1.top = tmp_rect1.bottom - 22;
	tmp_rect1.left = tmp_rect1.right - (rbs-1);

	tmp_rect2 = tmp_rect;
	tmp_rect2.top = tmp_rect1.bottom - (bbs-1);
	tmp_rect2.left = tmp_rect1.right - 22;

	if ((flags & NO_SIZE) == 0)
		if (point_in_rect(&tmp_rect1, h, v) || point_in_rect(&tmp_rect2, h, v))
			return(RESIZE_AREA);

	// check for click in tab
	tmp_rect1 = tmp_rect;
	tmp_rect1.bottom = tmp_rect1.top + bar_size;
	tmp_rect1.right = tmp_rect1.left + w7_calc_title_width(window_bound);
	if (point_in_rect(&tmp_rect1, h, v)) {
		return(TITLE_BAR);
	}

	// check for click in top border
	tmp_rect1 = tmp_rect;
	tmp_rect1.top = tmp_rect1.top + bar_size;
	tmp_rect1.bottom = tmp_rect1.top + (tbs-1);
	if (point_in_rect(&tmp_rect1, h, v)) {
		return(TITLE_BAR);
	}

	// check for click in bottom border
	tmp_rect1 = tmp_rect;
	tmp_rect1.top = tmp_rect1.bottom - (bbs-1);
	if (point_in_rect(&tmp_rect1, h, v)) {
		return(TITLE_BAR);
	}

	// check for click in left border
	tmp_rect1 = tmp_rect;
	tmp_rect1.right = tmp_rect1.left + (lbs-1);
	if (point_in_rect(&tmp_rect1, h, v)) {
		return(TITLE_BAR);
	}

	// check for click in right border
	tmp_rect1 = tmp_rect;
	tmp_rect1.left = tmp_rect1.right - (rbs-1);
	tmp_rect1.top += bar_size;
	if (point_in_rect(&tmp_rect1, h, v)) {
		return(TITLE_BAR);
	}

	return(CONTENT_AREA);
}

/*---------------------------------------------------------------*/

region*	TWindow::w7_calc_update(rect old_rect, rect new_rect)
{
	rect	tmp_rect;
	region	*tmp_region0 = 0;
	region	*tmp_region1;
	region	*tmp_region2;
	region	*tmp_region3;
	long	tw;

	tmp_rect.top = 0;
	tmp_rect.bottom = 0;
	tmp_rect.left = 0;
	tmp_rect.right = 10000;

	tw = w7_calc_title_width(tmp_rect);
	if ((old_rect.right != new_rect.right)
	   &&((new_rect.right - new_rect.left) <= tw ||
	      (old_rect.right - old_rect.left) <= tw)) {
		tmp_region0 = newregion();	
		tmp_rect.right = new_rect.left + tw;
		tmp_rect.left = min(old_rect.right, new_rect.right)-40;
		if (!(flags & NO_ZOOM))
			tmp_rect.left -= (ZOOM_ICON_WIDTH + ICON_MARGIN);
//+		if (!(flags & NO_MINIMIZE))
//+			tmp_rect.left -= (MINIMIZE_ICON_WIDTH + ICON_MARGIN);
		tmp_rect.top = min(old_rect.top, new_rect.top);
		tmp_rect.bottom = max(old_rect.top + bar_size, new_rect.top + bar_size);
		set_region(tmp_region0, &tmp_rect);
	}
	    
	
	old_rect.top += bar_size + 1;
	new_rect.top += bar_size + 1;

/* build the right side rectangle and make a region with it */

	if (0 && old_rect.right == new_rect.right) {
		tmp_rect.left = min(old_rect.right, new_rect.right);
		tmp_rect.right = tmp_rect.left;
		tmp_rect.top = new_rect.bottom;
		tmp_rect.bottom = new_rect.bottom;
	}
	else {
		tmp_rect.left = min(old_rect.right, new_rect.right) - (rbs-1);
		tmp_rect.right = max(old_rect.right, new_rect.right);
		tmp_rect.top = new_rect.top;
		tmp_rect.bottom = new_rect.bottom;
	}


	tmp_region1 = newregion();
	set_region(tmp_region1, &tmp_rect);

/* build the left side rectangle and make a region with it */

	tmp_rect.top = min(old_rect.bottom, new_rect.bottom) - (bbs-1);
	tmp_rect.bottom = max(old_rect.bottom, new_rect.bottom);
	tmp_rect.left = new_rect.left;
	tmp_rect.right = new_rect.right;


	tmp_region2=newregion();
	set_region(tmp_region2, &tmp_rect);


	tmp_region3 = newregion();

/* take the union of those two rectangles		 */

	or_region(tmp_region1, tmp_region2, tmp_region3);
	if (tmp_region0) {
		or_region(tmp_region0, tmp_region3, tmp_region2);
		kill_region(tmp_region0);

/* intersect it with the visible region			 */
		
		and_region(tmp_region2,
		   	   VisibleRegion(),
		   	   tmp_region1);
	}
	else {
		and_region(tmp_region3,
			   VisibleRegion(),
			   tmp_region1);
	}

/* dispose the tmp regions				*/

	kill_region(tmp_region2);
	kill_region(tmp_region3);
	return(tmp_region1);
}


/*---------------------------------------------------------------*/
