/*
 *  +-------------------------------------------------------------------+
 *  | Copyright (c) 1995,1996,1997 by Philips Semiconductors.           |
 *  |                                                                   |
 *  | This software  is furnished under a license  and may only be used |
 *  | and copied in accordance with the terms  and conditions of such a |
 *  | license  and with  the inclusion of this  copyright notice.  This |
 *  | software or any other copies of this software may not be provided |
 *  | or otherwise  made available  to any other person.  The ownership |
 *  | and title of this software is not transferred.                    |
 *  |                                                                   |
 *  | The information  in this software  is subject  to change  without |
 *  | any  prior notice  and should not be construed as a commitment by |
 *  | Philips Semiconductors.                                           |
 *  |                                                                   |
 *  | This  code  and  information  is  provided  "as is"  without  any |
 *  | warranty of any kind,  either expressed or implied, including but |
 *  | not limited  to the implied warranties  of merchantability and/or |
 *  | fitness for any particular purpose.                               |
 *  +-------------------------------------------------------------------+
 *
 *  Module name              : ModBldRepr.h    1.16
 *
 *  Module type              : SPECIFICATION
 *
 *  Title                    : Object module building mode representation 
 *
 *  Last update              : 00:05:51 - 98/04/17
 *
 *  Description              :  
 *             
 *          This header file describes the representation of
 *          an object module in 'building mode', to be operated
 *          upon by the functions provided by ModuleBuild. 
 *          The representation is internal to the ModuleBuild
 *          functions, but has been extracted from ModuleBuild
 *          to let this interface be implemented by different files.
 *
 *          In building mode, objects are gradually put together 
 *          and for instance no assumptions can be made on the ordering
 *          of the data of user- and system sections in memory:
 *          all data may be fragmented in memory, for instance single
 *          dtrees generated by the assembler, or the contents of
 *          single object files while linking, or the result of a post
 *          processing phase like a link optimiser or a padder.
 *          Also, all pointer fields in the system objects (see TMObj.h)
 *          and the offsets in section markers are actual memory addresses.
 *
 *          The output phase in ModuleBuild is responsible for packing
 *          all data fragments into section images, for reconstructing
 *          all of the section marker offsets to their proper values, and
 *          for converting all pointers in the system objects from actual 
 *          memory addresses to an encoded representation
 */

#ifndef  ModBldRepr_INCLUDED
#define  ModBldRepr_INCLUDED


/*---------------------------- Includes --------------------------------------*/

#include "Lib_Local.h"
#include "Lib_List.h"
#include "Lib_Set.h"
#include "Lib_Mapping.h"
#include "Lib_StdFuncs.h"
#include "ModuleBuild.h"

/*----------------------------- Type Definitions -----------------------------*/



  /*
   * The marker offsets in sectionunits
   * contain pointers to the section fragments
   * in their offset fields. They are stored
   * via an SUInfo which contains the actual offset
   * in their section (computed when added to the 
   * module).
   * The entire SUInfo list is used to quickly 
   * scan all existing section markers, and 
   * convert the memory addresses into their
   * final section offsets. For this reason
   * some information on the section unit and
   * its section is cached:
   */

    typedef struct {
        TMObj_SectionUnit   unit;
        UInt                offset;             /* Actual offset of the unit in its section */

        TMObj_Section       section;            /* Unit's section                           */
        Bool                has_data;           /* Unit's section has data?                 */
        Pointer             internal_address;   /* The current value of the unit's marker,  */
                                                /* offset which now is the address of the   */
                                                /* unit data.                               */
    } ModBldRepr_SUInfo;



/*
 * Module representation: sections must be unique
 * by name, and symbols only need to be unique by name
 * when they are external (the others are just kept in
 * a collection.
 */


typedef struct ModBuildRepr_Module_Rec {
    TMObj_Module  header;
        
    Lib_Mapping  /* String  --> TMObj_Section */  system_sections;
    Lib_Mapping  /* String  --> TMObj_Section */  user_sections;
    Lib_Mapping  /* String  --> TMObj_Symbol  */  global_symbols;

    Lib_List     /* TMObj_Symbol              */  symbols;
    Lib_List     /* TMObj_Symbol_Reference    */  symbol_references;
    Lib_List     /* TMObj_Marker_Reference    */  marker_references;
    Lib_List     /* TMObj_JTab_Reference      */  jtab_references;

    Lib_List     /* ModBldRepr_SUInfo */  sectionunits, sectionunits_last;
                                                       /* the order of section units is
                                                        * important: the link order must
                                                        * be preserved.
                                                        */

    Lib_Mapping  shuffle_memo;

   /*
    * Some lazy mappings which will be created 
    * when needed (and deleted when this module changes).
    * Needed for specific traversal functions.
    */
    Bool lazy_tables_filled;

    Lib_Mapping  /* TMObj_Marker_Rec* --> TMObj_SectionUnit                */   marker_to_sectionunit;
    Lib_Mapping  /* TMObj_SectionUnit --> ModBldRepr_SUInfo                */   sectionunit_to_suinfo;
    Lib_Mapping  /* TMObj_SectionUnit --> Lib_List(TMObj_Symbol)           */   sectionunit_to_symbols;
    Lib_Mapping  /* TMObj_SectionUnit --> Lib_List(TMObj_Symbol_Reference) */   sectionunit_to_symbolrefs;
    Lib_Mapping  /* TMObj_SectionUnit --> Lib_List(TMObj_JTab_Reference)   */   sectionunit_to_jtabrefs;
    Lib_Mapping  /* TMObj_SectionUnit --> Lib_List(TMObj_Marker_Reference) */   sectionunit_to_markerrefs;
    Lib_Mapping  /* TMObj_SectionUnit --> Lib_List(TMObj_Marker_Reference) */   sectionunit_from_markerrefs;

    Lib_Set /* TMObj_External_module */ external_modules;

} ModBuildRepr_Module_Rec;





#endif /* ModBldRepr_INCLUDED */
     
   
